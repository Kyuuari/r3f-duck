/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t public/models/duck.gltf
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { Detailed, Environment, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import { DepthOfField, EffectComposer } from "@react-three/postprocessing";

type GLTFResult = GLTF & {
  nodes: {
    character_duck: THREE.Mesh;
    character_duckArmLeft: THREE.Mesh;
    character_duckArmRight: THREE.Mesh;
    Cube1338: THREE.Mesh;
    Cube1338_1: THREE.Mesh;
    Cube1338_2: THREE.Mesh;
  };
  materials: {
    ["White.026"]: THREE.MeshStandardMaterial;
    ["Yellow.043"]: THREE.MeshStandardMaterial;
    ["Black.027"]: THREE.MeshStandardMaterial;
  };
};

function Duck(
  { index, z, speed }: { index: number; z: number; speed: number },
  props: JSX.IntrinsicElements["group"]
) {
  const ref = useRef<THREE.Group>(null);

  // useThree gives you access to the R3F state model
  const { viewport, camera } = useThree();
  // getCurrentViewport is a helper that calculates the size of the viewport
  const { width, height } = viewport.getCurrentViewport(camera, [0, 0, -z]);
  const { nodes, materials } = useGLTF("./models/duck.gltf") as GLTFResult;

  const [data] = useState({
    // Randomly distributing the objects along the vertical
    y: THREE.MathUtils.randFloatSpread(height * 2),
    // This gives us a random value between -1 and 1, we will multiply it with the viewport width
    x: THREE.MathUtils.randFloatSpread(2),
    // How fast objects spin, randFlost gives us a value between min and max, in this case 8 and 12
    spin: THREE.MathUtils.randFloat(8, 12),
    // Some random rotations, Math.PI represents 360 degrees in radian
    rX: Math.random() * Math.PI,
    rZ: Math.random() * Math.PI,
  });

  // useFrame executes 60 times per second
  useFrame((state, dt) => {
    // Make the X position responsive, slowly scroll objects up at the Y, distribute it along the Z
    // dt is the delta, the time between this frame and the previous, we can use it to be independent of the screens refresh rate
    // We cap dt at 0.1 because now it can't accumulate while the user changes the tab, it will simply stop
    if (dt < 0.1)
      ref.current!.position.set(
        index === 0 ? 0 : data.x * width,
        (data.y += dt * speed),
        -z
      );
    // Rotate the object around
    ref.current!.rotation.set(
      (data.rX += dt / data.spin),
      Math.sin(index * 1000 + state.clock.elapsedTime / 10) * Math.PI,
      (data.rZ += dt / data.spin)
    );
    // If they're too far up, set them back to the bottom
    if (data.y > height * (index === 0 ? 4 : 1))
      data.y = -(height * (index === 0 ? 4 : 1));
  });
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        geometry={nodes.character_duck.geometry}
        material={materials["White.026"]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <mesh
          geometry={nodes.character_duckArmLeft.geometry}
          material={materials["White.026"]}
          position={[0.2, 0, -0.63]}
        />
        <mesh
          geometry={nodes.character_duckArmRight.geometry}
          material={materials["White.026"]}
          position={[-0.2, 0, -0.63]}
        />
        <group position={[0, 0, -0.7]}>
          <mesh
            geometry={nodes.Cube1338.geometry}
            material={materials["White.026"]}
          />
          <mesh
            geometry={nodes.Cube1338_1.geometry}
            material={materials["Yellow.043"]}
          />
          <mesh
            geometry={nodes.Cube1338_2.geometry}
            material={materials["Black.027"]}
          />
        </group>
      </mesh>
    </group>
  );
}

export default function Ducks({
  speed = 1,
  count = 100,
  depth = 80,
  easing = (x: number) => Math.sqrt(1 - Math.pow(x - 1, 2)),
}) {
  return (
    // No need for antialias (faster), dpr clamps the resolution to 1.5 (also faster than full resolution)
    <Canvas
      gl={{ antialias: false }}
      dpr={[1, 1.5]}
      camera={{ position: [0, 0, 10], fov: 20, near: 0.01, far: depth + 15 }}
    >
      <color attach="background" args={["#85baff"]} />
      <spotLight
        position={[10, 20, 10]}
        penumbra={1}
        intensity={3}
        color="skyblue"
      />
      {/* Using cubic easing here to spread out objects a little more interestingly, i wanted a sole big object up front ... */}
      {Array.from(
        { length: count },
        (_, i) => <Duck key={i} index={i} z={Math.round(easing(i / count) * depth)} speed={speed} /> /* prettier-ignore */
      )}
      <Environment preset="sunset" />
      {/* Multisampling (MSAA) is WebGL2 antialeasing, we don't need it (faster) */}
      <EffectComposer multisampling={8}>
        <DepthOfField
          target={[0, 0, 60]}
          focalLength={0.4}
          bokehScale={5}
          height={700}
        />
      </EffectComposer>
    </Canvas>
  );
}

// useGLTF.preload("./models/duck.gltf");
